server:
  port: 8002
  tomcat:
    uri-encoding: UTF-8
eureka:
  client:
    service-url:
      defaultZone: http://${customConfig.eureka.server.username}:${customConfig.eureka.server.password}@${customConfig.eureka.server.hostname}:${customConfig.eureka.server.port}/eureka/
    register-with-eureka: true
    fetch-registry: true
  # 自定义实例编号
  instance:
#   instance-id: ${spring.application.name}:${server.port}:@project.version@
    # 配置使用主机名注册服务
#   hostname: ${spring.application.name}
    # 优先使用IP地址方式进行注册服务
    prefer-ip-address: true
spring:
  application:
    name: spring-oauth
  cloud:
    loadbalancer:
      retry:
        enabled: true #该参数用来开启重试机制
    config:
#      uri: http://localhost:8888
      enabled: true #开启配置
      username: ${customConfig.config.server.username}
      password: ${customConfig.config.server.password}
      name: ${customConfig.config.server.appname} #配置名称
      profile: dev
      fail-fast: true
      discovery:
        enabled: true
        serviceId: spring-config
    inetutils:
      ignored-interfaces[0]: docker0 #忽略docker0网卡
      ignored-interfaces[1]: veth.* #忽略所有veth开头的网卡
#     preferred-networks[0]: ^192\.168 #只使用192.168开头和10.0开头的ip地址，其他的地址都不会使用,不然在docker启动会向eureka注册10.xxx,外网访问不到这个服务
#      preferred-networks: ^192\.168\.[\d]+\.[\d]+$
#  security:
#    user:
#      name: ${customConfig.security.username}
#      password: ${customConfig.security.password}
  boot: #admin的配置
    admin:
#      client:
        url: http://${customConfig.admin.server.hostname}:${customConfig.admin.server.port}
        username: ${customConfig.admin.server.username}
        password: ${customConfig.admin.server.password}
  redis:
    host: ${customConfig.redis.server.host}
    password: ${customConfig.redis.server.password}
    port: ${customConfig.redis.server.port}
    timeout: ${customConfig.redis.server.timeout}
    jedis:
      pool:
        max-active: ${customConfig.redis.server.jedis.pool.max-active}
        max-wait: ${customConfig.redis.server.jedis.pool.max-wait}
        max-idle: ${customConfig.redis.server.jedis.pool.max-idle}
        min-idle: ${customConfig.redis.server.jedis.pool.min-idle}
  datasource:
    url: ${customConfig.datasource.server.url}
    username: ${customConfig.datasource.server.username}
    password: ${customConfig.datasource.server.password}
    driver-class-name: ${customConfig.datasource.server.driver-class-name}
    druid:
      initial-size: 1
      max-active: 20
      min-idle: 3
      max-wait: 60000
      pool-prepared-statements: false
      validation-query: SELECT 'x'
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 30000
      max-pool-prepared-statement-per-connection-size: 20
  jpa:
    database: MYSQL
    show-sql: true
  zipkin:
    enabled: true
    base-url: http://localhost:9410
    locator:
      discovery:
        enabled: true
    rabbitmq:
      queue: zipkin
  sleuth:
    sampler:
      probability: 1.0 #采样率为1.0 全部
  rabbitmq:
      host: ${customConfig.rabbitmq.server.host}
      port: ${customConfig.rabbitmq.server.port}
      username: ${customConfig.rabbitmq.server.username}
      password: ${customConfig.rabbitmq.server.password}
#zuul:
#  retryable: true #重试机制开关
#对当前服务的重试次数
#ribbon:
#  MaxAutoRetriesNextServer: 5
#  MaxAutoRetries: 0 #同一台实例最大重试次数，不包括首次
#  ConnectTimeout: 500 #指建立连接的时间
#  ReadTimeout: 10000
#  SocketTimeout: 10000
#hystrix:
#    command:
#        default:
#            execution:
#                isolation:
#                    thread:
#                        timeoutInMilliseconds: 10000
management:
  endpoints:
    web:
      exposure:
        include: "*"
  security:
    enabled: false
  endpoint:
    health:
      show-details: ALWAYS
  context-path: /aaatttcta

#Mybatis配置
mybatis:
  mapper-locations: classpath:mybatis/mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.log4j.Log4jImpl #使用日志
    cache-enabled: true                                 #使全局的映射器启用或禁用缓存
    lazy-loading-enabled: true                          #全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载
    aggressive-lazy-loading: true                       #当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载
    multiple-result-sets-enabled: true                  #是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true
    use-column-label: true                              #是否可以使用列的别名 (取决于驱动的兼容性) default:true
    use-generated-keys: true                            #允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false
    auto-mapping-behavior: partial                      #指定 MyBatis 如何自动映射 数据基表的列 NONE：不映射　PARTIAL:部分  FULL:全部
    default-executor-type: simple                       #这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）
    map-underscore-to-camel-case: true                  #使用驼峰命名法转换字段
    local-cache-scope: session                          #设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (多个SqlSession或者分布式的环境下使用，避免脏读 ) defalut:session
    jdbc-type-for-null: null                            #设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型

#logging:
#  level:
#    com.liu: DEBUG
#    jdbc.sqltiming: DEBUG

security:
  ignored: #/login,/oauth/authorize,/oauth/token,/oauth/error,/oauth/check_token,
            /oauth/token_key,/oauth/confirm_access,
            /checkcode,/favicon.ico,/images/**,/scripts/**,/styles/**


#debug: true
#logging:
#  level:
#   org: DEBUG
#   com: DEBUG


customConfig:
  eureka:
    server: #eureka的配置
      port: 8000
      username: admin
      password: admin123
      hostname: localhost
  config:
    server: #config的配置
      appname: spring-config
      username: admin
      password: admin123
      hostname: localhost
#  security: #security的配置
#    username: admin
#    password: admin123
  admin:  #admin的配置
    server:
      port: 7000
      hostname: localhost
      username: admin
      password: admin123
  redis:
    server:
      host: 127.0.0.1
      password: redisadmin
      port: 6379
      timeout: 8000
      jedis:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
  datasource:
    server:
      url: jdbc:mysql://127.0.0.1:3306/lovesound?useSSL=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT
      username: root
      password: admin
      driver-class-name: com.mysql.jdbc.Driver
  rabbitmq: #rabbitmq的配置
    server:
      host: 127.0.0.1
      port: 5672
      username: guest
      password: guest


