server:
  port: 8020
  tomcat:
    uri-encoding: UTF-8
#  ssl:
#    key-store: classpath:/keystore/love.keystore
#    key-store-password: fzhJOgT0
#    key-password: fzhJOgT0
#    key-store-type: JKS
eureka:
  client:
    service-url:
      defaultZone: http://${customConfig.eureka.server.username}:${customConfig.eureka.server.password}@${customConfig.eureka.server.hostname}:${customConfig.eureka.server.port}/eureka/
    register-with-eureka: true
    fetch-registry: true
    instance-info-replication-interval-seconds: 180 #复制实例变化信息到eureka服务器所需要的时间间隔（s），默认为30秒
    registry-fetch-interval-seconds: 180 #从eureka服务器注册表中获取注册信息的时间间隔（s），默认为30秒

spring:
  application:
    name: spring-order
  cloud:
    loadbalancer:
      retry:
        enabled: true #该参数用来开启重试机制
    config:
#      uri: http://localhost:8888
      enabled: true #开启配置
      username: ${customConfig.config.server.username}
      password: ${customConfig.config.server.password}
      name: ${customConfig.config.server.appname} #配置名称
      profile: dev
      fail-fast: true
      discovery:
        enabled: true
        serviceId: spring-config
  boot: #admin的配置
    admin:
#      client:
        url: http://${customConfig.admin.server.hostname}:${customConfig.admin.server.port}
        username: ${customConfig.admin.server.username}
        password: ${customConfig.admin.server.password}
  redis:
    host: ${customConfig.redis.server.host}
    password: ${customConfig.redis.server.password}
    port: ${customConfig.redis.server.port}
    timeout: ${customConfig.redis.server.timeout}
    jedis:
      pool:
        max-active: ${customConfig.redis.server.jedis.pool.max-active} # 连接池最大连接数（使用负值表示没有限制）
        max-wait: ${customConfig.redis.server.jedis.pool.max-wait}  # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: ${customConfig.redis.server.jedis.pool.max-idle}  # 连接池中的最大空闲连接
        min-idle: ${customConfig.redis.server.jedis.pool.min-idle}  # 连接池中的最小空闲连接
  datasource:
    url: ${customConfig.datasource.server.url}
    username: ${customConfig.datasource.server.username}
    password: ${customConfig.datasource.server.password}
    driver-class-name: ${customConfig.datasource.server.driver-class-name}
    druid:
      initial-size: 1
      max-active: 20
      min-idle: 3
      max-wait: 60000
      pool-prepared-statements: false
      validation-query: SELECT 'x'
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 30000
      max-pool-prepared-statement-per-connection-size: 20
  jpa:
    database: MYSQL
    show-sql: true
  zipkin:
    enabled: true
    base-url: http://localhost:9410
    locator:
      discovery:
        enabled: true
    rabbitmq:
      queue: zipkin
  sleuth:
    sampler:
      probability: 1.0 #采样率为1.0 全部
  rabbitmq:
      host: ${customConfig.rabbitmq.server.host}
      port: ${customConfig.rabbitmq.server.port}
      username: ${customConfig.rabbitmq.server.username}
      password: ${customConfig.rabbitmq.server.password}
  session:
    store-type: none #本应用暂无需将session放入redis的需求，故这里就可以将session store type设置为none
  http:
    multipart:
      enabled: true   # 启用http上传处理
      max-file-size: 100MB # 设置单个文件的最大长度
      max-request-size: 100MB # 设置最大的请求文件的大小
      file-size-threshold: 1MB  # 当上传文件达到1MB的时候进行磁盘写入
      location: /  # 上传的临时目录
  jmx:
    default-domain: tteesstt
  thymeleaf:
    cache: false
    mode: LEGACYHTML5
zuul:
  retryable: true #重试机制开关
#对当前服务的重试次数
ribbon:
# 所有请求都重试,请求超时或者socket read timeout都进行重试,默认只会在socket还没建立连接时进行重试，比如突然网络抖动或者一台服务实例挂了
# (修改操作，如果服务器长时间不返回，客户端发生socket read timeout会进行重试，如果服务器接口没做幂等性，这个后果自己想想。)
#  OkToRetryOnAllOperations: true  所以这个属性不设置
  MaxAutoRetriesNextServer: 5
  MaxAutoRetries: 0 #同一台实例最大重试次数，不包括首次
  ConnectTimeout: 500 #指建立连接的时间
  ReadTimeout: 10000
  SocketTimeout: 10000
hystrix:
    command:
        default:
            execution:
                isolation:
                    thread:
                        timeoutInMilliseconds: 10000
management:
  endpoints:
    web:
      exposure:
        include: "*"
  security:
    enabled: false
  endpoint:
    health:
      show-details: ALWAYS
#https://blog.csdn.net/yifanSJ/article/details/78756513
fdfs:
  so-timeout: 1500
  connect-timeout: 600
#  thumbImage:             #缩略图生成参数
#    width: 150
#    height: 150
  tracker-list:            #TrackerList参数,支持多个
    - 192.168.232.130:22122
    - 192.168.232.131:22122
#  security:
#    user:
#      name: ${customConfig.security.username}
#      password: ${customConfig.security.password}

#auth-server: http://qingyinoauth.com:8002 # 认证服务器地址
#auth-server: http://aaa.com:8002 # 认证服务器地址
auth-server: http://localhost:8002 # 认证服务器地址
#auth-server: http://lang:8001/spring-oauth # 认证服务器地址
security:
  ignored: /favicon.ico,/scripts/**,/styles/**,/images/**
  sessions: ALWAYS
  oauth2:
      sso:
        loginPath: /login
      client:
        clientId: ssoclient
        clientSecret: ssosecret
        accessTokenUri: ${auth-server}/oauth/token
        userAuthorizationUri: ${auth-server}/oauth/authorize
        clientAuthenticationScheme: form
        use-current-uri: true #如果在服务器端配置了自定义的回调地址,这里就必须设置成false,回调如:http://localhost:8005/getHello?code=XXFzbd&state=rOBMf7,我这里为true
      resource:
        jwt:
          keyUri: ${auth-server}/oauth/token_key

security-config:
  logoutSuccssurl: /tosignout
  permitAll: /getHello,/getHe,/zzzzzz,/delImage,downloadImage,/static/**,/smallProgram/**,/resource/**,/wechat/sub/**,/MP_verify_Lo5ZxMzKsqiAdzP2.txt,/favicon.ico
  deniedPage: /deny
  urlRoles: /getHello1,/getHello3 = admin;/**/delete/** = admin
#/swagger-ui.html,/v2/api-docs,/swagger-resources/**,/swagger-ui.html**,/webjars/**,

#mapper-locations: classpath:com/liu/util/image/mapper/*.xml
pagehelper:
    helperDialect: mysql
    reasonable: false #参数合理化,超过页大小会查最后一页
    supportMethodsArguments: true
    params: count=countSql


init-db: true

tx-lcn:
  client:
    manager-address: 127.0.0.1:8070
  logger:
    enabled: true
    driver-class-name: ${customConfig.datasource.server.driver-class-name}
    jdbc-url: ${customConfig.datasource.server.url}
    username: ${customConfig.datasource.server.username}
    password: ${customConfig.datasource.server.password}





debug: true
logging:
#  config: classpath:/log/logback.xml
  level:
#   org: DEBUG
   com.liu.spring: DEBUG

customConfig:
  eureka:
    server: #eureka的配置
      port: 8000
      username: admin
      password: admin123
      hostname: localhost
  config:
    server: #config的配置
      appname: spring-config
      username: admin
      password: admin123
      hostname: localhost
#  security: #security的配置
#    username: admin
#    password: admin123
  admin:  #admin的配置
    server:
      port: 7000
      hostname: localhost
      username: admin
      password: admin123
  redis:
    server:
      host: 127.0.0.1
      password: #redisadmin
      port: 6379
      timeout: 8000
      jedis:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
  datasource:
    server:
#      url: jdbc:mysql://192.168.232.129:8066/mydb?useSSL=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT
#      username: mycat
#      password: mycat
#      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://127.0.0.1:3306/lovesound?useSSL=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT
      username: root
      password: admin
      driver-class-name: com.mysql.jdbc.Driver
  rabbitmq: #rabbitmq的配置
    server:
      host: 127.0.0.1
      port: 5672
      username: guest
      password: guest
  image:
    resourceMappingPath: file:C:/log/resource/
    resourceAbsolutePath: C:/log/resource/
    resourceUrlPath: http://127.0.0.1:8005/resource/




